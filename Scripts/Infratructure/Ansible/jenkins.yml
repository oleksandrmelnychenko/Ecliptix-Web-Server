- hosts: jenkins
  become: true

  tasks:
    - name: Install dependencies
      apt:
        name:
          - fontconfig
          - openjdk-17-jdk
          - gnupg
          - curl
        state: present
        update_cache: yes

    - name: Add Jenkins key
      shell: |
        curl -fsSL https://pkg.jenkins.io/debian/jenkins.io-2023.key | tee /usr/share/keyrings/jenkins-keyring.asc > /dev/null

    - name: Add Jenkins apt repo
      apt_repository:
        repo: "deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] https://pkg.jenkins.io/debian binary/"
        state: present
        filename: jenkins

    - name: Install Jenkins
      apt:
        name: jenkins
        state: present
        update_cache: yes

    - name: Ensure systemd override directory exists
      file:
        path: /etc/systemd/system/jenkins.service.d
        state: directory

    - name: Override Jenkins port
      copy:
        dest: /etc/systemd/system/jenkins.service.d/override.conf
        content: |
          [Service]
          ExecStart=
          ExecStart=/usr/bin/java -Djava.awt.headless=true -jar /usr/share/java/jenkins.war --webroot=/var/cache/jenkins/war --httpPort={{ env_vars.JENKINS_PORT }}
      notify: Reload systemd and restart Jenkins

    - name: Ensure Jenkins service is enabled and started
      systemd:
        name: jenkins
        state: started
        enabled: true

    - name: Wait for Jenkins to be up on port {{ env_vars.JENKINS_PORT }}
      wait_for:
        host: localhost
        port: "{{ env_vars.JENKINS_PORT }}"
        delay: 5
        timeout: 120
        state: started

    - name: Ensure init.groovy.d directory exists
      file:
        path: /var/lib/jenkins/init.groovy.d
        state: directory
        owner: jenkins
        group: jenkins
        mode: '0755'

    - name: Create Groovy init script for Jenkins admin and plugins
      copy:
        dest: /var/lib/jenkins/init.groovy.d/init-admin.groovy
        owner: jenkins
        group: jenkins
        mode: '0644'
        content: |
          import jenkins.model.*
          import hudson.security.*
          import jenkins.install.InstallState

          def instance = Jenkins.getInstance()

          // Create admin user if missing
          def hudsonRealm = new HudsonPrivateSecurityRealm(false)
          if (hudsonRealm.getAllUsers().find { it.getId() == "{{ env_vars.JENKINS_USER }}" } == null) {
              hudsonRealm.createAccount("{{ env_vars.JENKINS_USER }}", "{{ env_vars.JENKINS_PASS }}")
          }
          instance.setSecurityRealm(hudsonRealm)

          // Set authorization strategy
          def strategy = new FullControlOnceLoggedInAuthorizationStrategy()
          strategy.setAllowAnonymousRead(false)
          instance.setAuthorizationStrategy(strategy)

          // Install basic plugins
          def pluginManager = instance.getPluginManager()
          def updateCenter = instance.getUpdateCenter()
          ["git","workflow-aggregator","github","github-branch-source"].each { plugin ->
              if (!pluginManager.getPlugin(plugin)) {
                  def installFuture = updateCenter.getPlugin(plugin).deploy()
                  installFuture.get()
              }
          }

          // Mark initial setup as complete
          Jenkins.instance.setInstallState(InstallState.INITIAL_SETUP_COMPLETED)

          instance.save()

  handlers:
    - name: Reload systemd and restart Jenkins
      systemd:
        name: jenkins
        daemon_reload: yes
        state: restarted
