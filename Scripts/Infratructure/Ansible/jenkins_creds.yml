- name: Install credentials into Jenkins from .env 
  hosts: jenkins
  gather_facts: false
  tasks:
    - name: Read SSH key from file
      set_fact:
        GITHUB_SSH_KEY: "{{ lookup('file', env_vars.GITHUB_SSH_KEY_PATH) }}"
    
    - name: Debug ssh
      debug:
        msg: "{{ GITHUB_SSH_KEY }}"

    - name: Install plugins via jenkins_script
      community.general.jenkins_script:
        url: "{{ env_vars.JENKINS_URL }}"
        user: "{{ env_vars.JENKINS_USER }}"
        password: "{{ env_vars.JENKINS_PASS }}"
        script: |
          import jenkins.model.*
          def instance = Jenkins.getInstance()
          ["plain-credentials","aws-credentials"].each { plugin ->
              def pm = instance.getPluginManager()
              def uc = instance.getUpdateCenter()
              if (!pm.getPlugin(plugin)) {
                  uc.getPlugin(plugin).deploy().get()
              }
          }
          
    - name: Create GitHub SSH key credential
      community.general.jenkins_script:
        url: "{{ env_vars.JENKINS_URL }}"
        user: "{{ env_vars.JENKINS_USER }}"
        password: "{{ env_vars.JENKINS_PASS }}"
        script: |
          import jenkins.model.*
          import com.cloudbees.plugins.credentials.*
          import com.cloudbees.plugins.credentials.domains.*
          import com.cloudbees.plugins.credentials.impl.*
          import com.cloudbees.plugins.credentials.CredentialsScope
          import com.cloudbees.jenkins.plugins.sshcredentials.impl.BasicSSHUserPrivateKey
          
          def instance = Jenkins.get()
          def store = instance.getExtensionList('com.cloudbees.plugins.credentials.SystemCredentialsProvider')[0].getStore()
          def domain = Domain.global()

          def existing = store.getCredentials(domain).find { it.id == 'github-ssh-key' }
          if (existing) { store.removeCredentials(domain, existing) }

          def privateKeySource = new BasicSSHUserPrivateKey.DirectEntryPrivateKeySource(
              """{{ GITHUB_SSH_KEY }}"""
          )

          def sshKey = new BasicSSHUserPrivateKey(
              CredentialsScope.GLOBAL,
              "github-ssh-key",
              "{{ env_vars.GITHUB_USER }}",
              privateKeySource,
              null,
              "GitHub SSH key (ed25519)"
          )
          
          store.addCredentials(domain, sshKey)
          
    - name: Create AWS credential
      community.general.jenkins_script:
        url: "{{ env_vars.JENKINS_URL }}"
        user: "{{ env_vars.JENKINS_USER }}"
        password: "{{ env_vars.JENKINS_PASS }}"
        script: |
          import com.cloudbees.plugins.credentials.*
          import com.cloudbees.plugins.credentials.domains.*
          import com.cloudbees.plugins.credentials.SystemCredentialsProvider
          import com.cloudbees.jenkins.plugins.awscredentials.AWSCredentialsImpl
          import com.cloudbees.plugins.credentials.CredentialsScope
          
          def awsCredentials = new AWSCredentialsImpl(
            CredentialsScope.GLOBAL,
            "aws-creds",
            "{{ env_vars.AWS_ACCESS_KEY_ID }}",
            "{{ env_vars.AWS_SECRET_ACCESS_KEY }}",
            "AWS credentials for Jenkins"
          )
          
          def credentialsStore = SystemCredentialsProvider.getInstance().getStore()
          credentialsStore.addCredentials(Domain.global(), awsCredentials)
