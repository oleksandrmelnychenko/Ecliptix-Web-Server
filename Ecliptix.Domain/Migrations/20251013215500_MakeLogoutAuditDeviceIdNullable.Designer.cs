// <auto-generated />
using System;
using Ecliptix.Domain.Schema;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Ecliptix.Domain.Migrations
{
    [DbContext(typeof(EcliptixSchemaContext))]
    [Migration("20251013215500_MakeLogoutAuditDeviceIdNullable")]
    partial class MakeLogoutAuditDeviceIdNullable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Ecliptix.Domain.Schema.Entities.AccountEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("AccountType")
                        .HasColumnType("int");

                    b.Property<string>("CountryCode")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("CredentialsVersion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("DataResidencyRegion")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDefaultAccount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastAccessedAt")
                        .HasColumnType("DATETIME2");

                    b.Property<byte[]>("MaskingKey")
                        .HasColumnType("VARBINARY(32)");

                    b.Property<Guid>("MembershipId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PreferredLanguage")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<byte[]>("SecureKey")
                        .HasColumnType("VARBINARY(176)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TimeZoneId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("UniqueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .IsDescending()
                        .HasDatabaseName("IX_AccountEntity_CreatedAt")
                        .HasFilter("IsDeleted = 0");

                    b.HasIndex("MembershipId")
                        .HasDatabaseName("IX_Accounts_Membership_Active_Covering")
                        .HasFilter("IsDeleted = 0 AND Status = 1");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("MembershipId"), new[] { "UniqueId", "AccountType", "AccountName", "IsDefaultAccount" });

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Accounts_Status")
                        .HasFilter("IsDeleted = 0");

                    b.HasIndex("UniqueId")
                        .IsUnique()
                        .HasDatabaseName("UQ_AccountEntity_UniqueId");

                    b.HasIndex("UpdatedAt")
                        .IsDescending()
                        .HasDatabaseName("IX_AccountEntity_UpdatedAt")
                        .HasFilter("IsDeleted = 0");

                    b.HasIndex("MembershipId", "AccountType")
                        .HasDatabaseName("IX_Accounts_Membership_Type")
                        .HasFilter("IsDeleted = 0");

                    b.HasIndex("MembershipId", "IsDefaultAccount")
                        .IsUnique()
                        .HasDatabaseName("UX_Accounts_Membership_Default")
                        .HasFilter("IsDeleted = 0 AND IsDefaultAccount = 1");

                    b.ToTable("Accounts", null, t =>
                        {
                            t.HasCheckConstraint("CHK_Accounts_Default_Active", "(IsDefaultAccount = 0) OR (Status != 2)");
                        });
                });

            modelBuilder.Entity("Ecliptix.Domain.Schema.Entities.DeviceContextEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<Guid?>("ActiveAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ContextEstablishedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime>("ContextExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<long?>("DeviceEntityId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastActivityAt")
                        .HasColumnType("DATETIME2");

                    b.Property<Guid>("MembershipId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UniqueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.HasIndex("ActiveAccountId");

                    b.HasIndex("ContextExpiresAt")
                        .HasDatabaseName("IX_DeviceContexts_ExpiresAt")
                        .HasFilter("IsDeleted = 0 AND IsActive = 1");

                    b.HasIndex("CreatedAt")
                        .IsDescending()
                        .HasDatabaseName("IX_DeviceContextEntity_CreatedAt")
                        .HasFilter("IsDeleted = 0");

                    b.HasIndex("DeviceEntityId");

                    b.HasIndex("DeviceId")
                        .HasDatabaseName("IX_DeviceContexts_DeviceId_Active")
                        .HasFilter("IsDeleted = 0 AND IsActive = 1");

                    b.HasIndex("UniqueId")
                        .IsUnique()
                        .HasDatabaseName("UQ_DeviceContextEntity_UniqueId");

                    b.HasIndex("UpdatedAt")
                        .IsDescending()
                        .HasDatabaseName("IX_DeviceContextEntity_UpdatedAt")
                        .HasFilter("IsDeleted = 0");

                    b.HasIndex("ContextExpiresAt", "IsActive")
                        .HasDatabaseName("IX_DeviceContexts_ExpiresAt_Cleanup")
                        .HasFilter("IsDeleted = 0 AND IsActive = 1");

                    b.HasIndex("MembershipId", "DeviceId")
                        .HasDatabaseName("IX_DeviceContexts_Active_Covering")
                        .HasFilter("IsDeleted = 0 AND IsActive = 1");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("MembershipId", "DeviceId"), new[] { "UniqueId", "ActiveAccountId", "ContextExpiresAt", "LastActivityAt" });

                    b.HasIndex("MembershipId", "IsActive")
                        .HasDatabaseName("IX_DeviceContexts_Membership_IsActive")
                        .HasFilter("IsDeleted = 0");

                    b.HasIndex("MembershipId", "LastActivityAt")
                        .IsDescending(false, true)
                        .HasDatabaseName("IX_DeviceContexts_MembershipActivity")
                        .HasFilter("IsDeleted = 0 AND IsActive = 1");

                    b.HasIndex("MembershipId", "DeviceId", "IsActive")
                        .IsUnique()
                        .HasDatabaseName("UX_DeviceContexts_Membership_Device_Active")
                        .HasFilter("IsDeleted = 0 AND IsActive = 1");

                    b.ToTable("DeviceContexts", null, t =>
                        {
                            t.HasCheckConstraint("CHK_DeviceContexts_Activity_Valid", "LastActivityAt IS NULL OR LastActivityAt >= ContextEstablishedAt");

                            t.HasCheckConstraint("CHK_DeviceContexts_Expiry_Future", "ContextExpiresAt > ContextEstablishedAt");
                        });
                });

            modelBuilder.Entity("Ecliptix.Domain.Schema.Entities.DeviceEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<Guid>("AppInstanceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("DeviceType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid>("UniqueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.HasIndex("AppInstanceId")
                        .HasDatabaseName("IX_Devices_AppInstanceId");

                    b.HasIndex("CreatedAt")
                        .IsDescending()
                        .HasDatabaseName("IX_DeviceEntity_CreatedAt")
                        .HasFilter("IsDeleted = 0");

                    b.HasIndex("DeviceType")
                        .HasDatabaseName("IX_Devices_DeviceType")
                        .HasFilter("IsDeleted = 0");

                    b.HasIndex("UniqueId")
                        .IsUnique()
                        .HasDatabaseName("UQ_DeviceEntity_UniqueId");

                    b.HasIndex("UpdatedAt")
                        .IsDescending()
                        .HasDatabaseName("IX_DeviceEntity_UpdatedAt")
                        .HasFilter("IsDeleted = 0");

                    b.ToTable("Devices", (string)null);
                });

            modelBuilder.Entity("Ecliptix.Domain.Schema.Entities.FailedOtpAttemptEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("AttemptedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("AttemptedValue")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("FailureReason")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<long>("OtpRecordId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("UniqueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.HasIndex("AttemptedAt")
                        .IsDescending()
                        .HasDatabaseName("IX_FailedOtpAttempts_AttemptedAt")
                        .HasFilter("IsDeleted = 0");

                    b.HasIndex("CreatedAt")
                        .IsDescending()
                        .HasDatabaseName("IX_FailedOtpAttemptEntity_CreatedAt")
                        .HasFilter("IsDeleted = 0");

                    b.HasIndex("OtpRecordId")
                        .HasDatabaseName("IX_FailedOtpAttempts_OtpRecordId");

                    b.HasIndex("UniqueId")
                        .IsUnique()
                        .HasDatabaseName("UQ_FailedOtpAttemptEntity_UniqueId");

                    b.HasIndex("UpdatedAt")
                        .IsDescending()
                        .HasDatabaseName("IX_FailedOtpAttemptEntity_UpdatedAt")
                        .HasFilter("IsDeleted = 0");

                    b.ToTable("FailedOtpAttempts", (string)null);
                });

            modelBuilder.Entity("Ecliptix.Domain.Schema.Entities.LoginAttemptEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<Guid?>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AttemptedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("DATETIME2");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid?>("DeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsSuccess")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LockedUntil")
                        .HasColumnType("DATETIME2");

                    b.Property<Guid?>("MembershipUniqueId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MobileNumber")
                        .HasMaxLength(18)
                        .HasColumnType("nvarchar(18)");

                    b.Property<string>("Outcome")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("UniqueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CreatedAt")
                        .IsDescending()
                        .HasDatabaseName("IX_LoginAttemptEntity_CreatedAt")
                        .HasFilter("IsDeleted = 0");

                    b.HasIndex("IsSuccess")
                        .HasDatabaseName("IX_LoginAttempts_IsSuccess")
                        .HasFilter("IsDeleted = 0");

                    b.HasIndex("MobileNumber")
                        .HasDatabaseName("IX_LoginAttempts_MobileNumber")
                        .HasFilter("IsDeleted = 0 AND MobileNumber IS NOT NULL");

                    b.HasIndex("UniqueId")
                        .IsUnique()
                        .HasDatabaseName("UQ_LoginAttemptEntity_UniqueId");

                    b.HasIndex("UpdatedAt")
                        .IsDescending()
                        .HasDatabaseName("IX_LoginAttemptEntity_UpdatedAt")
                        .HasFilter("IsDeleted = 0");

                    b.HasIndex("MembershipUniqueId", "AttemptedAt")
                        .IsDescending(false, true)
                        .HasDatabaseName("IX_LoginAttempts_Membership_AttemptedAt")
                        .HasFilter("IsDeleted = 0");

                    b.HasIndex("MobileNumber", "LockedUntil")
                        .HasDatabaseName("IX_LoginAttempts_Lockout")
                        .HasFilter("IsDeleted = 0 AND LockedUntil IS NOT NULL");

                    b.HasIndex("DeviceId", "AttemptedAt", "IsSuccess")
                        .IsDescending(false, true, false)
                        .HasDatabaseName("IX_LoginAttempts_DeviceRateLimiting")
                        .HasFilter("IsDeleted = 0 AND DeviceId IS NOT NULL");

                    b.HasIndex("MobileNumber", "AttemptedAt", "IsSuccess", "LockedUntil")
                        .IsDescending(false, true, false, false)
                        .HasDatabaseName("IX_LoginAttempts_RateLimiting_Optimized")
                        .HasFilter("IsDeleted = 0 AND LockedUntil IS NULL AND MobileNumber IS NOT NULL");

                    b.ToTable("LoginAttempts", null, t =>
                        {
                            t.HasCheckConstraint("CHK_LoginAttempts_LockedUntil_Future", "LockedUntil IS NULL OR LockedUntil > AttemptedAt");

                            t.HasCheckConstraint("CHK_LoginAttempts_Success_CompletedAt", "(IsSuccess = 0) OR (CompletedAt IS NOT NULL)");
                        });
                });

            modelBuilder.Entity("Ecliptix.Domain.Schema.Entities.LogoutAuditEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<Guid?>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid?>("DeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("LoggedOutAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid>("MembershipUniqueId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("UniqueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CreatedAt")
                        .IsDescending()
                        .HasDatabaseName("IX_LogoutAuditEntity_CreatedAt")
                        .HasFilter("IsDeleted = 0");

                    b.HasIndex("DeviceId")
                        .HasDatabaseName("IX_LogoutAudits_DeviceId")
                        .HasFilter("IsDeleted = 0");

                    b.HasIndex("LoggedOutAt")
                        .IsDescending()
                        .HasDatabaseName("IX_LogoutAudits_LoggedOutAt")
                        .HasFilter("IsDeleted = 0");

                    b.HasIndex("UniqueId")
                        .IsUnique()
                        .HasDatabaseName("UQ_LogoutAuditEntity_UniqueId");

                    b.HasIndex("UpdatedAt")
                        .IsDescending()
                        .HasDatabaseName("IX_LogoutAuditEntity_UpdatedAt")
                        .HasFilter("IsDeleted = 0");

                    b.HasIndex("MembershipUniqueId", "LoggedOutAt")
                        .IsDescending(false, true)
                        .HasDatabaseName("IX_LogoutAudits_Membership_LoggedOutAt")
                        .HasFilter("IsDeleted = 0");

                    b.ToTable("LogoutAudits", (string)null);
                });

            modelBuilder.Entity("Ecliptix.Domain.Schema.Entities.MasterKeyShareEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("CredentialsVersion")
                        .HasColumnType("int");

                    b.Property<byte[]>("EncryptedShare")
                        .IsRequired()
                        .HasColumnType("VARBINARY(128)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid>("MembershipUniqueId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ShareIndex")
                        .HasColumnType("int");

                    b.Property<string>("ShareMetadata")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(500)");

                    b.Property<string>("StorageLocation")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("UniqueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .IsDescending()
                        .HasDatabaseName("IX_MasterKeyShareEntity_CreatedAt")
                        .HasFilter("IsDeleted = 0");

                    b.HasIndex("ShareIndex")
                        .HasDatabaseName("IX_MasterKeyShares_ShareIndex");

                    b.HasIndex("UniqueId")
                        .IsUnique()
                        .HasDatabaseName("UQ_MasterKeyShareEntity_UniqueId");

                    b.HasIndex("UpdatedAt")
                        .IsDescending()
                        .HasDatabaseName("IX_MasterKeyShareEntity_UpdatedAt")
                        .HasFilter("IsDeleted = 0");

                    b.HasIndex("MembershipUniqueId", "ShareIndex")
                        .IsUnique()
                        .HasDatabaseName("UQ_MasterKeyShares_MembershipShare");

                    b.ToTable("MasterKeyShares", (string)null);
                });

            modelBuilder.Entity("Ecliptix.Domain.Schema.Entities.MembershipEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<Guid>("AppDeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreationStatus")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("CredentialsVersion")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<byte[]>("MaskingKey")
                        .HasColumnType("VARBINARY(32)");

                    b.Property<Guid>("MobileNumberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("SecureKey")
                        .HasColumnType("VARBINARY(176)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("inactive");

                    b.Property<Guid>("UniqueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid?>("VerificationFlowId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AppDeviceId")
                        .HasDatabaseName("IX_Memberships_AppDeviceId");

                    b.HasIndex("CreatedAt")
                        .IsDescending()
                        .HasDatabaseName("IX_MembershipEntity_CreatedAt")
                        .HasFilter("IsDeleted = 0");

                    b.HasIndex("MobileNumberId")
                        .HasDatabaseName("IX_Memberships_Login_Covering")
                        .HasFilter("IsDeleted = 0 AND Status = 'active'");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("MobileNumberId"), new[] { "UniqueId", "SecureKey", "MaskingKey", "CredentialsVersion", "CreationStatus" });

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Memberships_Status")
                        .HasFilter("IsDeleted = 0");

                    b.HasIndex("UniqueId")
                        .IsUnique()
                        .HasDatabaseName("UQ_Memberships_UniqueId");

                    b.HasIndex("UpdatedAt")
                        .IsDescending()
                        .HasDatabaseName("IX_MembershipEntity_UpdatedAt")
                        .HasFilter("IsDeleted = 0");

                    b.HasIndex("VerificationFlowId");

                    b.HasIndex("MobileNumberId", "AppDeviceId", "IsDeleted")
                        .IsUnique()
                        .HasDatabaseName("UQ_Memberships_ActiveMembership");

                    b.ToTable("Memberships", null, t =>
                        {
                            t.HasCheckConstraint("CHK_Memberships_CreationStatus", "CreationStatus IN ('otp_verified', 'secure_key_set', 'passphrase_set')");

                            t.HasCheckConstraint("CHK_Memberships_Credentials_Consistency", "(SecureKey IS NULL AND MaskingKey IS NULL) OR (SecureKey IS NOT NULL AND MaskingKey IS NOT NULL)");

                            t.HasCheckConstraint("CHK_Memberships_Status", "Status IN ('active', 'inactive')");
                        });
                });

            modelBuilder.Entity("Ecliptix.Domain.Schema.Entities.MobileNumberEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(18)
                        .HasColumnType("nvarchar(18)");

                    b.Property<string>("Region")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<Guid>("UniqueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .IsDescending()
                        .HasDatabaseName("IX_MobileNumbers_CreatedAt")
                        .HasFilter("IsDeleted = 0");

                    b.HasIndex("Number")
                        .IsUnique()
                        .HasDatabaseName("UQ_MobileNumbers_Number");

                    b.HasIndex("Region")
                        .HasDatabaseName("IX_MobileNumbers_Region")
                        .HasFilter("IsDeleted = 0 AND Region IS NOT NULL");

                    b.HasIndex("UniqueId")
                        .IsUnique()
                        .HasDatabaseName("UQ_MobileNumberEntity_UniqueId");

                    b.HasIndex("UpdatedAt")
                        .IsDescending()
                        .HasDatabaseName("IX_MobileNumberEntity_UpdatedAt")
                        .HasFilter("IsDeleted = 0");

                    b.HasIndex("Number", "Region")
                        .HasDatabaseName("IX_MobileNumbers_MobileNumber_Region")
                        .HasFilter("IsDeleted = 0");

                    b.HasIndex("Number", "Region", "IsDeleted")
                        .IsUnique()
                        .HasDatabaseName("UQ_MobileNumbers_ActiveNumberRegion")
                        .HasFilter("[Region] IS NOT NULL");

                    b.ToTable("MobileNumbers", (string)null);
                });

            modelBuilder.Entity("Ecliptix.Domain.Schema.Entities.OtpCodeEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<short>("AttemptCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("OtpSalt")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("OtpValue")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("active");

                    b.Property<Guid>("UniqueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<long>("VerificationFlowId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .IsDescending()
                        .HasDatabaseName("IX_OtpCodeEntity_CreatedAt")
                        .HasFilter("IsDeleted = 0");

                    b.HasIndex("ExpiresAt")
                        .HasDatabaseName("IX_OtpCodes_ExpiresAt")
                        .HasFilter("IsDeleted = 0");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_OtpCodes_Status")
                        .HasFilter("IsDeleted = 0");

                    b.HasIndex("UniqueId")
                        .IsUnique()
                        .HasDatabaseName("UQ_OtpCodeEntity_UniqueId");

                    b.HasIndex("UpdatedAt")
                        .IsDescending()
                        .HasDatabaseName("IX_OtpCodeEntity_UpdatedAt")
                        .HasFilter("IsDeleted = 0");

                    b.HasIndex("VerificationFlowId")
                        .HasDatabaseName("IX_OtpCodes_VerificationFlowId");

                    b.ToTable("OtpCodes", null, t =>
                        {
                            t.HasCheckConstraint("CHK_OtpCodes_Status", "Status IN ('active', 'used', 'expired', 'invalid')");
                        });
                });

            modelBuilder.Entity("Ecliptix.Domain.Schema.Entities.VerificationFlowEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<Guid>("AppDeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("ConnectionId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid>("MobileNumberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<short>("OtpCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0);

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasDefaultValue("unspecified");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("pending");

                    b.Property<Guid>("UniqueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.HasIndex("AppDeviceId")
                        .HasDatabaseName("IX_VerificationFlows_AppDeviceId");

                    b.HasIndex("CreatedAt")
                        .IsDescending()
                        .HasDatabaseName("IX_VerificationFlowEntity_CreatedAt")
                        .HasFilter("IsDeleted = 0");

                    b.HasIndex("ExpiresAt")
                        .HasDatabaseName("IX_VerificationFlows_ExpiresAt")
                        .HasFilter("IsDeleted = 0");

                    b.HasIndex("MobileNumberId")
                        .HasDatabaseName("IX_VerificationFlows_MobileNumberId");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_VerificationFlows_Status")
                        .HasFilter("IsDeleted = 0");

                    b.HasIndex("UniqueId")
                        .IsUnique()
                        .HasDatabaseName("UQ_VerificationFlowEntity_UniqueId");

                    b.HasIndex("UpdatedAt")
                        .IsDescending()
                        .HasDatabaseName("IX_VerificationFlowEntity_UpdatedAt")
                        .HasFilter("IsDeleted = 0");

                    b.HasIndex("MobileNumberId", "AppDeviceId", "Purpose", "Status", "ExpiresAt")
                        .HasDatabaseName("IX_VerificationFlows_ActiveFlowRecovery")
                        .HasFilter("IsDeleted = 0 AND Status = 'pending'");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("MobileNumberId", "AppDeviceId", "Purpose", "Status", "ExpiresAt"), new[] { "UniqueId", "ConnectionId", "OtpCount", "CreatedAt", "UpdatedAt" });

                    b.ToTable("VerificationFlows", null, t =>
                        {
                            t.HasCheckConstraint("CHK_VerificationFlows_Purpose", "Purpose IN ('unspecified', 'registration', 'login', 'password_recovery', 'update_phone')");

                            t.HasCheckConstraint("CHK_VerificationFlows_Status", "Status IN ('pending', 'verified', 'expired', 'failed')");
                        });
                });

            modelBuilder.Entity("Ecliptix.Domain.Schema.Entities.AccountEntity", b =>
                {
                    b.HasOne("Ecliptix.Domain.Schema.Entities.MembershipEntity", "Membership")
                        .WithMany("Accounts")
                        .HasForeignKey("MembershipId")
                        .HasPrincipalKey("UniqueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Accounts_Memberships");

                    b.Navigation("Membership");
                });

            modelBuilder.Entity("Ecliptix.Domain.Schema.Entities.DeviceContextEntity", b =>
                {
                    b.HasOne("Ecliptix.Domain.Schema.Entities.AccountEntity", "ActiveAccount")
                        .WithMany()
                        .HasForeignKey("ActiveAccountId")
                        .HasPrincipalKey("UniqueId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_DeviceContexts_Accounts");

                    b.HasOne("Ecliptix.Domain.Schema.Entities.DeviceEntity", null)
                        .WithMany("DeviceContexts")
                        .HasForeignKey("DeviceEntityId");

                    b.HasOne("Ecliptix.Domain.Schema.Entities.DeviceEntity", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .HasPrincipalKey("UniqueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_DeviceContexts_Devices");

                    b.HasOne("Ecliptix.Domain.Schema.Entities.MembershipEntity", "Membership")
                        .WithMany("DeviceContexts")
                        .HasForeignKey("MembershipId")
                        .HasPrincipalKey("UniqueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_DeviceContexts_Memberships");

                    b.Navigation("ActiveAccount");

                    b.Navigation("Device");

                    b.Navigation("Membership");
                });

            modelBuilder.Entity("Ecliptix.Domain.Schema.Entities.FailedOtpAttemptEntity", b =>
                {
                    b.HasOne("Ecliptix.Domain.Schema.Entities.OtpCodeEntity", "OtpRecord")
                        .WithMany("FailedAttempts")
                        .HasForeignKey("OtpRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_FailedOtpAttempts_OtpCodes");

                    b.Navigation("OtpRecord");
                });

            modelBuilder.Entity("Ecliptix.Domain.Schema.Entities.LoginAttemptEntity", b =>
                {
                    b.HasOne("Ecliptix.Domain.Schema.Entities.AccountEntity", "Account")
                        .WithMany("LoginAttempts")
                        .HasForeignKey("AccountId")
                        .HasPrincipalKey("UniqueId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_LoginAttempts_Accounts");

                    b.HasOne("Ecliptix.Domain.Schema.Entities.DeviceEntity", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .HasPrincipalKey("UniqueId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_LoginAttempts_Devices");

                    b.HasOne("Ecliptix.Domain.Schema.Entities.MembershipEntity", "Membership")
                        .WithMany("LoginAttempts")
                        .HasForeignKey("MembershipUniqueId")
                        .HasPrincipalKey("UniqueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_LoginAttempts_Memberships");

                    b.Navigation("Account");

                    b.Navigation("Device");

                    b.Navigation("Membership");
                });

            modelBuilder.Entity("Ecliptix.Domain.Schema.Entities.LogoutAuditEntity", b =>
                {
                    b.HasOne("Ecliptix.Domain.Schema.Entities.AccountEntity", "Account")
                        .WithMany("LogoutAudits")
                        .HasForeignKey("AccountId")
                        .HasPrincipalKey("UniqueId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_LogoutAudits_Accounts");

                    b.HasOne("Ecliptix.Domain.Schema.Entities.DeviceEntity", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .HasPrincipalKey("UniqueId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_LogoutAudits_Devices");

                    b.HasOne("Ecliptix.Domain.Schema.Entities.MembershipEntity", "Membership")
                        .WithMany()
                        .HasForeignKey("MembershipUniqueId")
                        .HasPrincipalKey("UniqueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_LogoutAudits_Memberships");

                    b.Navigation("Account");

                    b.Navigation("Device");

                    b.Navigation("Membership");
                });

            modelBuilder.Entity("Ecliptix.Domain.Schema.Entities.MasterKeyShareEntity", b =>
                {
                    b.HasOne("Ecliptix.Domain.Schema.Entities.MembershipEntity", "Membership")
                        .WithMany("MasterKeyShares")
                        .HasForeignKey("MembershipUniqueId")
                        .HasPrincipalKey("UniqueId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_MasterKeyShares_Memberships");

                    b.Navigation("Membership");
                });

            modelBuilder.Entity("Ecliptix.Domain.Schema.Entities.MembershipEntity", b =>
                {
                    b.HasOne("Ecliptix.Domain.Schema.Entities.DeviceEntity", "AppDevice")
                        .WithMany("Memberships")
                        .HasForeignKey("AppDeviceId")
                        .HasPrincipalKey("UniqueId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Memberships_Devices");

                    b.HasOne("Ecliptix.Domain.Schema.Entities.MobileNumberEntity", "MobileNumber")
                        .WithMany("Memberships")
                        .HasForeignKey("MobileNumberId")
                        .HasPrincipalKey("UniqueId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Memberships_MobileNumbers");

                    b.HasOne("Ecliptix.Domain.Schema.Entities.VerificationFlowEntity", "VerificationFlow")
                        .WithMany("Memberships")
                        .HasForeignKey("VerificationFlowId")
                        .HasPrincipalKey("UniqueId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_Memberships_VerificationFlows");

                    b.Navigation("AppDevice");

                    b.Navigation("MobileNumber");

                    b.Navigation("VerificationFlow");
                });

            modelBuilder.Entity("Ecliptix.Domain.Schema.Entities.OtpCodeEntity", b =>
                {
                    b.HasOne("Ecliptix.Domain.Schema.Entities.VerificationFlowEntity", "VerificationFlow")
                        .WithMany("OtpCodes")
                        .HasForeignKey("VerificationFlowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_OtpCodes_VerificationFlows");

                    b.Navigation("VerificationFlow");
                });

            modelBuilder.Entity("Ecliptix.Domain.Schema.Entities.VerificationFlowEntity", b =>
                {
                    b.HasOne("Ecliptix.Domain.Schema.Entities.DeviceEntity", "AppDevice")
                        .WithMany("VerificationFlows")
                        .HasForeignKey("AppDeviceId")
                        .HasPrincipalKey("UniqueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_VerificationFlows_Devices");

                    b.HasOne("Ecliptix.Domain.Schema.Entities.MobileNumberEntity", "MobileNumber")
                        .WithMany("VerificationFlows")
                        .HasForeignKey("MobileNumberId")
                        .HasPrincipalKey("UniqueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_VerificationFlows_MobileNumbers");

                    b.Navigation("AppDevice");

                    b.Navigation("MobileNumber");
                });

            modelBuilder.Entity("Ecliptix.Domain.Schema.Entities.AccountEntity", b =>
                {
                    b.Navigation("LoginAttempts");

                    b.Navigation("LogoutAudits");
                });

            modelBuilder.Entity("Ecliptix.Domain.Schema.Entities.DeviceEntity", b =>
                {
                    b.Navigation("DeviceContexts");

                    b.Navigation("Memberships");

                    b.Navigation("VerificationFlows");
                });

            modelBuilder.Entity("Ecliptix.Domain.Schema.Entities.MembershipEntity", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("DeviceContexts");

                    b.Navigation("LoginAttempts");

                    b.Navigation("MasterKeyShares");
                });

            modelBuilder.Entity("Ecliptix.Domain.Schema.Entities.MobileNumberEntity", b =>
                {
                    b.Navigation("Memberships");

                    b.Navigation("VerificationFlows");
                });

            modelBuilder.Entity("Ecliptix.Domain.Schema.Entities.OtpCodeEntity", b =>
                {
                    b.Navigation("FailedAttempts");
                });

            modelBuilder.Entity("Ecliptix.Domain.Schema.Entities.VerificationFlowEntity", b =>
                {
                    b.Navigation("Memberships");

                    b.Navigation("OtpCodes");
                });
#pragma warning restore 612, 618
        }
    }
}
