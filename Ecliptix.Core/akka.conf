akka {
  # Logging configuration
  stdout-loglevel = INFO
  loglevel = INFO
  log-dead-letters = 10
  log-dead-letters-during-shutdown = off

  persistence {
    sql-store {
      journal {
        class = "Akka.Persistence.Sql.Journal.SqlWriteJournal, Akka.Persistence.Sql"
        connection-string = ${?ECLIPTIX_DB_CONNECTION_STRING}
        provider-name = "SqlServer"
        schema-name = dbo
        table-name = "EventJournal"
        call-timeout = 60s
        
        # Circuit breaker for resilience
        circuit-breaker {
          max-failures = 5
          call-timeout = 10s
          reset-timeout = 30s
        }
      }

      snapshot {
        class = "Akka.Persistence.Sql.Snapshot.SqlSnapshotStore, Akka.Persistence.Sql"
        connection-string = ${?ECLIPTIX_DB_CONNECTION_STRING}
        provider-name = "SqlServer"
        schema-name = dbo
        table-name = "SnapshotStore"
        call-timeout = 60s
        
        # Circuit breaker for resilience
        circuit-breaker {
          max-failures = 5
          call-timeout = 10s
          reset-timeout = 30s
        }
      }

      metadata {
        table-name = "journal_metadata"
      }
    }

    journal.plugin = "akka.persistence.sql-store.journal"
    snapshot-store.plugin = "akka.persistence.sql-store.snapshot"
    
    # Recovery settings
    recovery {
      replay-filter {
        mode = repair-by-discard-old
        window-size = 100
        max-old-writers = 10
        debug = false
      }
    }
  }
  
  actor {
    ask-timeout = 30s
    
    # Default dispatcher configuration
    default-dispatcher {
      type = Dispatcher
      executor = "fork-join-executor"
      
      fork-join-executor {
        parallelism-min = 2
        parallelism-max = 8
        parallelism-factor = 2.0
      }
      
      throughput = 5
    }
    
    # Dedicated dispatcher for database operations
    database-dispatcher {
      type = Dispatcher
      executor = "thread-pool-executor"
      
      thread-pool-executor {
        fixed-pool-size = 4
        task-queue-size = -1
      }
      
      throughput = 1
    }
    
    serializers {
      sessionstate = "Ecliptix.Domain.Utilities.ByteArraySessionStateSerializer, Ecliptix.Domain"
    }

    serialization-bindings {
      "Ecliptix.Protobuf.ProtocolState.EcliptixSessionState, Ecliptix.Domain" = sessionstate
    }
    
    # Coordinated shutdown for graceful termination
    coordinated-shutdown {
      terminate-actor-system = on
      run-by-actor-system-terminate = on
      
      phases {
        before-service-unbind {
          timeout = 10s
        }
        
        service-requests-done {
          timeout = 20s
        }
        
        before-actor-system-terminate {
          timeout = 10s
        }
        
        actor-system-terminate {
          timeout = 20s
        }
      }
    }
  }
}
